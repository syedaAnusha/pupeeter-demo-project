// const express = require("express");
// const puppeteer = require("puppeteer");

// const app = express();

// async function fetchUrls() {
//   try {
//     const browser = await puppeteer.launch();
//     const page = await browser.newPage();
//     await page.goto("https://news.ycombinator.com/");
//     let urls = await page.evaluate(() => {
//       let results = [];
//       let items = document.querySelectorAll("a");
//       items.forEach((item) => {
//         results.push({
//           url: item.getAttribute("href"),
//           text: item.innerText,
//         });
//       });
//       return results;
//     });
//     await browser.close();
//     return urls;
//   } catch (e) {
//     throw e;
//   }
// }

// app.get("/fetch-urls", async (req, res) => {
//   try {
//     const urls = await fetchUrls();
//     res.json(urls);
//   } catch (error) {
//     res.status(500).send({ error: error.message });
//   }
// });

// const PORT = process.env.PORT || 5173;
// app.listen(PORT, () => {
//   console.log(`Server is running on port ${PORT}`);
// });

-------



// puppeteer-extra is a drop-in replacement for puppeteer,
// it augments the installed puppeteer with plugin functionality
// const puppeteer = require("puppeteer-extra");

// // add recaptcha plugin and provide it your 2captcha token (= their apiKey)
// // 2captcha is the builtin solution provider but others would work as well.
// // Please note: You need to add funds to your 2captcha account for this to work
// const RecaptchaPlugin = require("puppeteer-extra-plugin-recaptcha");
// puppeteer.use(
//   RecaptchaPlugin({
//     provider: {
//       id: "2captcha",
//       token: "XXXXXXXXXX", // REPLACE THIS WITH YOUR OWN 2CAPTCHA API KEY âš¡
//     },
//     visualFeedback: true, // colorize reCAPTCHAs (violet = detected, green = solved)
//   })
// );

// // puppeteer usage as normal
// puppeteer.launch({ headless: false }).then(async (browser) => {
//   const page = await browser.newPage();
//   await page.goto("https://www.google.com/recaptcha/api2/demo");

//   // That's it, a single line of code to solve reCAPTCHAs ðŸŽ‰
//   // Loop over all potential frames on that page

//   for (const frame of page.mainFrame().childFrames()) {
//     // Attempt to solve any potential captchas in those frames
//     const { captchas, filtered, solutions, solved, error } =
//       await frame.solveRecaptchas();

//     console.log(solved);
//   }

//   await Promise.all([
//     page.waitForNavigation(),
//     page.click(`#recaptcha-demo-submit`),
//   ]);

//   //await page.screenshot({ path: 'response.png', fullPage: true })

//   //await browser.close()
// });

------
const puppeteer = require("puppeteer");
// Launch the browser and open a new blank page

(async () => {
  const browser = await puppeteer.launch({ headless: true });
  const page = await browser.newPage();

  // Navigate the page to a URL.
  await page.goto("https://www.vocabulary.com/lists/52473");

  // Set screen size.
  await page.setViewport({ width: 1280, height: 1624 });

  // Type into search box.
  // await page.type(".devsite-search-field", "automate beyond recorder");
  await page.screenshot({ path: "example.png", fullPage: true });

  // Wait and click on first result.
  // const searchResultSelector = ".devsite-result-item-link";
  // await page.waitForSelector(searchResultSelector);
  // await page.click(searchResultSelector);

  // Locate the full title with a unique string.
  // const textSelector = await page.waitForSelector(
  //   "text/Customize and automate"
  // );
  // const fullTitle = await textSelector?.evaluate((el) => el.textContent);

  // // Print the full title.
  // console.log('The title of this blog post is "%s".', fullTitle);
  await browser.close();
})();


npm install puppeteer-extra-plugin-stealth puppeteer-extra
npm install node-fetch https-proxy-agent


// https://www.websitecarbon.com/
// https://ecograder.com/
// https://news.ycombinator.com/
// https://insigh.to/
// const URL = "https://www.vocabulary.com/lists/52473";
// https://www.ef.com/wwen/english-resources/english-vocabulary/top-3000-words/